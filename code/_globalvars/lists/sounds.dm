#define SOUND_LENGTHS_FILEPATH "sound/sound_lengths.txt"

/// Assoc list of of all sounds in the codebase, in the form "sound/path.ext" = length in seconds
GLOBAL_LIST_INIT(sound_lengths, json_decode(file2text(SOUND_LENGTHS_FILEPATH)))

/*
//the above file was generated by this proc
/client/proc/generate_sound_lengths()
	set category = "Debug.Sound"
	set name = "Generate Sound Lengths"

	var/static/list/sound_list = get_all_sounds()
	to_chat(src, text = "[length(sound_list)] sound files found.")

	var/list/playing_sounds = list()
	for(var/i in 0 to length(sound_list) step 1000)
		sound_to(src, sound()) //clear all playing sounds
		to_chat(src, text = "Querying sound files [i + 1] to [min(length(sound_list), i + 1000)]...")

		for(var/j in 1 to min(length(sound_list) - i, 1000))
			var/sound_file = sound_list[j + i]
			var/sound/sound = sound(sound_file, FALSE, FALSE, j, 0)
			sound.status |= SOUND_STREAM|SOUND_PAUSED|SOUND_MUTE
			sound_to(src, sound)

		playing_sounds += src.SoundQuery()
	to_chat(src, text = "Queried [length(playing_sounds)] out of [length(sound_list)] sounds.")
	sound_to(src, sound())

	var/list/sound_lengths = list()
	for(var/sound/playing_sound as anything in playing_sounds)
		if(!ISINRANGE(playing_sound.channel, 1, 1000))
			continue
		sound_lengths[playing_sound.file] = playing_sound.len
	to_chat(src, text = "Parsed [length(sound_lengths)] out of [length(sound_list)] unique sounds.")

	var/saved_lengths = file(SOUND_LENGTHS_FILEPATH)
	fdel(saved_lengths)
	to_file(saved_lengths, "// [length(sound_lengths)] elements generated by [__PROC__] on [time2text(world.realtime)]")
	to_file(saved_lengths, json_encode(sound_lengths, JSON_PRETTY_PRINT))
	to_chat(src, text = "Wrote [length(sound_lengths)] elements to file: [saved_lengths]")

#undef SOUND_LENGTHS_FILEPATH

/proc/get_all_sounds()
	var/static/list/extensions = list("mid", "midi", "mod", "it", "s3m", "xm", "oxm", "wav", "ogg", "mp3", "raw", "wma", "aiff")
	var/static/regex/ext_rgx = new("\\.(?:[jointext(extensions, "|")])$", "i")

	var/list/dirs = list("sound/")
	var/list/file_paths = list()
	for(var/i = 1, i <= length(dirs), i++)
		var/path = dirs[i]

		var/list/filenames = flist(path)
		for(var/filename as anything in filenames)
			if(findtext(filename, "/", -1)) //found directory, add to search
				dirs += "[path][filename]"
				continue
			if(!findtext(filename, ext_rgx)) //extension check
				continue
			file_paths += "[path][filename]"

	return file_paths
*/
